import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "primereact/button";
import { Card } from "primereact/card";
import { FileUpload } from "primereact/fileupload";
import { Carousel } from "primereact/carousel";
import { ProgressSpinner } from "primereact/progressspinner";
import { Message } from "primereact/message";

function ShopOrder() {
  const navigate = useNavigate();
  const [cart, setCart] = useState([]);
  const [form, setForm] = useState({
    images: [],
  });
  const [uploadedSlipUrl, setUploadedSlipUrl] = useState(null);
  const [orderStatus, setOrderStatus] = useState(null);
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [orderId, setOrderId] = useState("999");

  useEffect(() => {
    const storedCart = JSON.parse(localStorage.getItem("cart")) || [];
    setCart(storedCart);
  }, []);

  const mockAddress = {
    name: "Ben Tennyson",
    phone: "+66 985413645",
    address:
      "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 155/55, ‡∏´‡∏°‡∏π‡πà 50, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡πÇ‡∏î‡πÄ‡∏£‡∏°‡πà‡∏≠‡∏ô, ‡∏ï‡∏≥‡∏ö‡∏• ‡∏ö‡∏≤‡∏á‡∏á‡∏á, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏á‡∏á 11120",
  };

  if (!cart || cart.lenght === 0) {
    return <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>;
  }

  const handleUploadSlip = async () => {
    if (!form.images.length) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }

    const formData = new FormData();
    formData.append("slip", form.images[0].file);
    formData.append("orderId", orderId);

    setLoading(true);
    setErrorMessage("");

    try {
      const response = await fetch("http://localhost:1234/api/upload-slip", {
        method: "POST",
        body: formData,
      });

      const result = await response.json();
      console.log("üì® Upload Response:", result);

      if (!response.ok) {
        setErrorMessage(result.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ");
        setLoading(false);
        return;
      }

      setUploadedSlipUrl(result.imageUrl);
      setLoading(false);
    } catch (error) {
      console.error("‚ùå Error:", error);
      setErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
      setLoading(false);
    }
  };

  const handleCheckSlip = async () => {
    if (!form.images.length) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö");
      return;
    }

    const formData = new FormData();
    formData.append("slip", form.images[0].file);
    formData.append("amount", grandTotal);

    setLoading(true);
    setErrorMessage("");

    try {
      const response = await fetch("http://localhost:1234/api/check-slip", {
        method: "POST",
        body: formData,
      });

      const result = await response.json();
      console.log("üì® Check Response:", result);

      if (!response.ok) {
        setErrorMessage(result.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ");
        setLoading(false);
        return;
      }

      setOrderStatus("PAID");
      setLoading(false);
    } catch (error) {
      console.error("‚ùå Error:", error);
      setErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
      setLoading(false);
    }
  };

  const handleOrderConfirmation = async () => {
    if (!form.images.length) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return;
    }

    const formData = new FormData();
    formData.append("slip", form.images[0].file);
    formData.append("amount", grandTotal);
    formData.append("orderId", orderId);

    setLoading(true);
    setErrorMessage("");

    try {
      const uploadResponse = await fetch(
        "http://localhost:1234/api/upload-slip",
        {
          method: "POST",
          body: formData,
        }
      );

      const uploadResult = await uploadResponse.json();
      console.log("üì® Upload API Response:", uploadResult);

      if (!uploadResponse.ok) {
        setErrorMessage(uploadResult.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ");
        setLoading(false);
        return;
      }

      setUploadedSlipUrl(uploadResult.imageUrl);

      const orderData = {
        cart,
        slipUrl: uploadResult.imageUrl,
        orderId: orderId,
      };

      const orderResponse = await fetch("http://localhost:1234/api/orders", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(orderData),
      });

      if (orderResponse.ok) {
        const orderResult = await orderResponse.json();
        alert(`‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orderResult.orderStatus}`);

        localStorage.removeItem("cart");
        window.dispatchEvent(new Event("cartUpdated"));
        navigate("/shop-order-info", { state: { orderDetails: orderResult } });
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      }
    } catch (err) {
      console.error("‚ùå Error:", err);
      setErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    } finally {
      setLoading(false);
    }
  };

  const totalProductPrice = cart.reduce((sum, item) => {
    const price =
      typeof item.product.price === "number"
        ? item.product.price
        : parseInt(item.product.price.replace(/,| ‡∏ö‡∏≤‡∏ó/g, ""), 10);

    return sum + price * item.quantity;
  }, 0);

  const totalInstallationFee = cart.reduce(
    (sum, item) => sum + (item.installation === "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" ? 150 : 0),
    0
  );

  const grandTotal = totalProductPrice + totalInstallationFee;

  const handleImageUpload = (event) => {
    const uploadedFiles = event.files.map((file) => ({
      file,
      previewUrl: URL.createObjectURL(file),
    }));

    setForm((prevForm) => ({
      ...prevForm,
      images: [...prevForm.images, ...uploadedFiles],
    }));
  };

  const handleRemoveImage = (event) => {
    setForm((prevForm) => {
      const updatedImages = prevForm.images.filter(
        (image) => image.file.name !== event.file.name
      );

      return { ...prevForm, images: updatedImages };
    });
  };

  const imageTemplate = (imageUrl, index) => {
    return (
      <img
        key={index}
        src={imageUrl}
        alt="Product"
        style={{
          width: "100%", // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏° container
          maxWidth: "300px", // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ
          height: "auto", // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          maxHeight: "300px", // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π00‡∏á
          objectFit: "contain", // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏£‡∏ö ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î
          borderRadius: "8px",
          backgroundColor: "#fff",
        }}
      />
    );
  };

  return (
    <div className="lg:flex justify-content-center pt-6">
      <div className="px-4 sm:px-6 md:px-8 lg:mr-8">
        <div className="lg:pl-5">
          <h1>‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h1>
          <div className="mb-3">
            <h3>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
            <div
              style={{
                border: "1px solid #ddd",
                padding: "15px",
                backgroundColor: "#f9f9f9",
              }}
            >
              <p>
                <strong>{mockAddress.name}</strong> | {mockAddress.phone}
              </p>
              <p>{mockAddress.address}</p>
              <Button
                label="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                className="p-button-text p-button-sm"
                style={{ float: "right", marginTop: "-20px" }}
              />
            </div>
          </div>
        </div>
        {cart.map((item, index) => (
          <div key={index} className="lg:flex">
            <div className="w-[200px] lg:pt-6">
              {Array.isArray(item.product.images) &&
              item.product.images.length > 0 ? (
                <Carousel
                  value={item.product.images} // ‡πÉ‡∏ä‡πâ array ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ
                  numVisible={1}
                  numScroll={1}
                  itemTemplate={imageTemplate}
                  style={{ maxWidth: "400px", width: "100%" }}
                />
              ) : (
                <img
                  src="https://via.placeholder.com/300"
                  alt="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ"
                  style={{
                    width: "200px",
                    height: "200px",
                    objectFit: "cover",
                  }}
                />
              )}
            </div>
            <div className="lg:pt-4">
              <div className="flex-1 text-left">
                <h3 className="text-sm lg:text-xl">{item.product.name}</h3>
                <p className="text-xs lg:text-base">{item.installation}</p>
                <p className="text-xs lg:text-base flex items-center">
                  ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:
                  <span
                    style={{
                      backgroundColor: item.selectedColor || "transparent",
                      borderRadius: "50%",
                      border: "1px solid #ccc",
                      display: "inline-block",
                      width: "20px",
                      height: "20px",
                      marginLeft: "10px",
                    }}
                  ></span>
                </p>
                <p className="text-xs lg:text-base sm:text-sm">
                  ‡∏Å‡∏ß‡πâ‡∏≤‡∏á {item.dimensions?.width || "-"} ‡∏ï‡∏£.‡∏°. | ‡∏¢‡∏≤‡∏ß{" "}
                  {item.dimensions?.height || "-"} ‡∏ï‡∏£.‡∏°. | ‡∏´‡∏ô‡∏≤{" "}
                  {item.dimensions?.thickness || "-"} ‡∏°‡∏°.
                </p>
                <p className="text-sm lg:text-lg">
                  ‡∏ø{item.product.price.toLocaleString()}
                </p>
              </div>
              <p className="text-xs lg:text-base">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}</p>
            </div>
          </div>
        ))}
      </div>
      <div className="pl-5 pr-5 lg:pt-7">
        <div className="w-full lg:w-auto justify-content-center flex">
          <Card
            style={{
              width: "500px",
              borderRadius: "10px",
              boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
              padding: "10px",
              backgroundColor: "#f6f6f6",
              height: "250px",
            }}
          >
            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
            <div className="flex justify-content-between text-lg">
              <p>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</p>
              <p>‡∏ø{totalProductPrice.toLocaleString()}</p>
            </div>

            {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á */}
            <div className="flex justify-content-between mb-3">
              <p>‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á</p>
              <p>‡∏ø{totalInstallationFee.toLocaleString()}</p>
            </div>

            {/* ‚úÖ ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô */}
            <div className="border-t border-gray-300 my-3"></div>

            <div
              className="flex justify-content-between mb-3 border-t border-gray-300 pt-3"
              style={{ borderTop: "1px solid #ddd", paddingTop: "15px" }}
            >
              <strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</strong>
              <strong>‡∏ø{grandTotal.toLocaleString()}</strong>
            </div>
          </Card>
        </div>
        <div className="pt-4 ">
          <div>
            <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</strong>
          </div>
          <div className="w-full lg:w-auto flex justify-end pt-3">
            <Card
              style={{
                width: "100%", // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏° container
                maxWidth: "500px", // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ
                height: "auto", // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                maxHeight: "800px", // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π00‡∏á
                borderRadius: "10px",
                padding: "20px",
                backgroundColor: "#f6f6f6",
              }}
            >
              <div>
                <p>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£</p>
              </div>
              <div>
                <p>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 0591344439</p>
              </div>
              <div>
                <p>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏±‡∏ô‡∏ï‡πå‡∏ò‡∏µ ‡∏à‡∏¥‡∏ï‡∏£‡πÅ‡∏Å‡πâ‡∏ß</p>
              </div>
              <div className="p-field p-col-12 pt-2">
                <label>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
                <div className="pt-2">
                  <FileUpload
                    name="images"
                    mode="advanced"
                    accept="image/*"
                    maxFileSize={1000000}
                    customUpload
                    uploadHandler={handleImageUpload}
                    onRemove={handleRemoveImage}
                    chooseLabel="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"
                    auto
                  />
                </div>
              </div>
              <h2 className="text-lg font-bold mt-4">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h2>

              {loading && (
                <ProgressSpinner style={{ width: "50px", height: "50px" }} />
              )}

              {!loading && orderStatus && (
                <div
                  className={`p-3 rounded-lg mt-2 text-white ${
                    orderStatus === "PAID" ? "bg-green-500" : "bg-yellow-500"
                  }`}
                >
                  {orderStatus === "PAID"
                    ? "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                    : "‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"}
                </div>
              )}

              {errorMessage && (
                <Message
                  severity="error"
                  text={errorMessage}
                  className="mt-2"
                />
              )}

              <div className="pt-3">
                <Button
                  label="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ"
                  onClick={handleCheckSlip}
                  className="bg-yellow-500 text-white py-2 text-lg font-bold rounded"
                />
              </div>
            </Card>
          </div>
          <div className="md:text-center pt-5">
            <Button
              label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
              onClick={handleOrderConfirmation}
              className="w-full bg-blue-600 text-white py-2 text-lg font-bold rounded"
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default ShopOrder;
