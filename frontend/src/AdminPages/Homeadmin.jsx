// File: src/Homeadmin.jsx
import React, { useState, useEffect } from "react";
import { Card } from "primereact/card";
import { Button } from "primereact/button";
import { Chart } from "primereact/chart";
import { Dialog } from "primereact/dialog";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";
import { Dropdown } from "primereact/dropdown";

// ----- Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå) -----
import useSalesDataSeparate from "./Homeadmin component/useSalesDataSeparate";

// ----- Hook ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì -----
import useCompletedOrders from "./Homeadmin component/useCompletedOrders";
import useFailedOrders from "./Homeadmin component/useFailedOrders";
import useCompletedRepairs from "./Homeadmin component/useCompletedRepairs";
import useFailedRepairs from "./Homeadmin component/useFailedRepairs";
import useUserCount from "./Homeadmin component/useUserCount";
import useInventoryData from "./Homeadmin component/useInventoryData";
import NotificationButton from "./Homeadmin component/NotificationButton";

export default function Homeadmin() {
    // ============== Hook dashboard ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ==============
    const completedOrders = useCompletedOrders();
    const failedOrders = useFailedOrders();
    const completedRepairs = useCompletedRepairs();
    const failedRepairs = useFailedRepairs();
    const { totalStock, productStock } = useInventoryData();
    const userCount = useUserCount();
    const [inventoryDialog, setInventoryDialog] = useState(false);

    // ============== ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Hook ‡πÅ‡∏¢‡∏Å ==============
    const {
        yearData, totalYearSales,
        monthData, totalMonthSales,
        loadYearData, loadMonthData
    } = useSalesDataSeparate();

    // ============== State ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü ==============
    const [chartMode, setChartMode] = useState("year");       // "year" | "month"
    const [chartData, setChartData] = useState({ labels: [], datasets: [] });
    const [selectedMonth, setSelectedMonth] = useState(null);

    // ============== Dialog ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ==============
    const [showMonthDialog, setShowMonthDialog] = useState(false);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ mount ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å -> ‡πÇ‡∏´‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏õ‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default)
    useEffect(() => {
        loadYearData().then(() => {
            // ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à -> sync ‡∏Å‡∏±‡∏ö chartData
            updateChartData("year");
        });
    }, []);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ chartMode ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô -> ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + update chart
    useEffect(() => {
        if (chartMode === "year") {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô year -> loadYearData (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î)
            loadYearData().then(() => {
                updateChartData("year");
            });
        } else if (chartMode === "month") {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô month ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô -> chart ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á
            updateChartData("month");
        }
    }, [chartMode]);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ monthData ‡∏´‡∏£‡∏∑‡∏≠ yearData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï chart
    useEffect(() => {
        updateChartData(chartMode);
    }, [yearData, monthData]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô chartData ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    function updateChartData(mode) {
        if (mode === "year" && yearData.length) {
            const labels = yearData.map(item => item.name);
            const dataset = yearData.map(item => item.sales);

            setChartData({
                labels,
                datasets: [
                    {
                        label: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)",
                        data: dataset,
                        backgroundColor: "rgba(54, 162, 235, 0.6)",
                        borderColor: "rgba(54, 162, 235, 1)",
                        borderWidth: 2
                    }
                ]
            });
        } else if (mode === "month" && monthData.length) {
            const labels = monthData.map(item => item.name);    // "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #1" ...
            const dataset = monthData.map(item => item.total);  // total ‡∏ö‡∏≤‡∏ó

            setChartData({
                labels,
                datasets: [
                    {
                        label: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
                        data: dataset,
                        backgroundColor: "rgba(255, 159, 64, 0.6)",
                        borderColor: "rgba(255, 159, 64, 1)",
                        borderWidth: 2
                    }
                ]
            });
        } else {
            // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
            setChartData({ labels: [], datasets: [] });
        }
    }

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Dropdown -> loadMonthData -> update chart
    function handleSelectMonth(e) {
        const mon = e.value;
        setSelectedMonth(mon);
        loadMonthData(mon).then(() => {
            updateChartData("month");
        });
    }

    return (
        <div className="p-5">
            {/* Header */}
            <div className="flex justify-content-between align-items-center mb-4">
                <h2 className="text-2xl flex align-items-center">
                    üìä Dashboard ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
                </h2>
                <NotificationButton />
            </div>

            <Card style={{ backgroundColor: '#026DCA', borderRadius: '5px' }}>
                <div className="grid">
                    <div className="col-12 md:col-5">
                        <div className="grid">
                            {[
                                { title: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", value: completedOrders.length, color: "text-green-500", unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", icon: "‚úÖ" },
                                { title: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", value: failedOrders.length, color: "text-red-500", unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", icon: "‚ùå" },
                                { title: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á", value: totalStock, color: "text-blue-500", unit: "‡∏ä‡∏¥‡πâ‡∏ô", icon: "üì¶", onClick: () => setInventoryDialog(true) },
                                { title: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", value: userCount, color: "text-purple-500", unit: "‡∏Ñ‡∏ô", icon: "üë§" },
                                { title: "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", value: completedRepairs, color: "text-teal-500", unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", icon: "üõ†Ô∏è" },
                                { title: "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", value: failedRepairs, color: "text-orange-500", unit: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", icon: "‚ö†Ô∏è" }
                            ].map((item, idx) => (
                                <div className="col-6 p-2" key={idx}>
                                    <Card className="shadow-3 p-1 text-center border-2 border-gray-300" onClick={item.onClick}>
                                        <h4 className="text-gray-700 text-sm flex justify-center items-center">
                                            {item.icon} {item.title}
                                        </h4>
                                        <h3 className={`font-bold text-md ${item.color} mt-2`}>
                                            {item.value} {item.unit}
                                        </h3>
                                    </Card>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* ======== ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤: Chart ‡∏ó‡∏µ‡πà‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡∏õ‡∏µ/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ======== */}
                    <div className="col-12 md:col-7">
                        <Card title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" className="shadow-3 p-2 relative">
                            {/* Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î (year / month) */}
                            <div className="mb-2 flex gap-2">
                                <Dropdown
                                    value={chartMode}
                                    options={[
                                        { label: "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ", value: "year" },
                                        { label: "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", value: "month" }
                                    ]}
                                    onChange={(e) => setChartMode(e.value)}
                                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏£‡∏≤‡∏ü"
                                    className="mr-2"
                                />

                                {chartMode === "month" && (
                                    <Dropdown
                                        value={selectedMonth}
                                        options={["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]}
                                        onChange={handleSelectMonth}
                                        placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                                    />
                                )}
                            </div>

                            <div className="mt-2" style={{ minHeight: "400px" }}>
                                <Chart
                                    type="bar"
                                    data={chartData}
                                    options={{
                                        maintainAspectRatio: false,
                                        plugins: { legend: { display: false } },
                                        scales: { y: { beginAtZero: true } }
                                    }}
                                    style={{ height: "400px" }}
                                />
                            </div>

                            <div className="pt-3">
                                {chartMode === "year" ? (
                                    <span className="text-green-600 font-bold text-lg">
                                        ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ: {totalYearSales.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                                    </span>
                                ) : (
                                    <span className="text-blue-600 font-bold text-lg">
                                        ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selectedMonth ?? "-"}: {totalMonthSales.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                                    </span>
                                )}
                            </div>

                            {/* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
                            {chartMode === "month" && (
                                <div className="pt-2">
                                    <Button
                                        label="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
                                        onClick={() => setShowMonthDialog(true)}
                                        className="p-button-info"
                                    />
                                </div>
                            )}

                            <Dialog header="üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á" visible={inventoryDialog} style={{ width: '50vw' }} onHide={() => setInventoryDialog(false)}>
                                <DataTable value={productStock} paginator rows={5}>
                                    <Column field="id" header="‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"></Column>
                                    <Column field="name" header="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"></Column>
                                    <Column field="type" header="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"></Column>
                                    <Column
                                        field="stock"
                                        header="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
                                        body={(rowData) => (
                                            <span style={{
                                                color: rowData.stock === 0 ? 'red' : rowData.stock < 10 ? 'orange' : 'black',
                                                fontWeight: rowData.stock === 0 ? 'bold' : 'normal'
                                            }}>
                                                {rowData.stock}
                                            </span>
                                        )}
                                    />
                                </DataTable>
                            </Dialog>
                        </Card>
                    </div>
                </div>

                {/* ======== Dialog ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ======== */}
                <Dialog
                    header="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                    visible={showMonthDialog}
                    onHide={() => setShowMonthDialog(false)}
                    style={{ width: "50vw" }}
                >
                    <DataTable value={monthData} paginator rows={5}>
                        <Column field="name" header="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" />
                        <Column field="order_date" header="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" />
                        <Column
                            field="total"
                            header="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"
                            body={(rowData) => rowData.total?.toLocaleString() || "0"}
                        />
                    </DataTable>
                </Dialog>
            </Card>
        </div>
    );
}
