import React, { useState, useEffect } from "react";
import { Button } from "primereact/button";
import { InputText } from "primereact/inputtext";
import ProductService from "./Manageproducts component/ProductService";
import ProductTable from "./Manageproducts component/ProductTable";
import ProductForm from "./Manageproducts component/ProductForm";

// 1) import useLocationData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á doorConfig ‡∏°‡∏≤‡∏à‡∏≤‡∏Å doorConfig.json
import useLocationData from "../Hooks/useLocationData";

const ManageProducts = () => {
  // 2) ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useLocationData ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á doorConfig
  const { doorConfig, shutter_partsConfig } = useLocationData();
  useEffect(() => {
    console.log("üîç doorConfig:", doorConfig);
    console.log("üîç shutter_partsConfig:", shutter_partsConfig);
  }, [doorConfig, shutter_partsConfig]);


  // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà Dropdown ‡∏™‡πà‡∏á‡∏°‡∏≤ (manual_rolling_shutter ‡∏Ø‡∏•‡∏Ø) ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô doorConfig (MANUAL, CHAIN, ELECTRIC)
  const categoryMap = {
    manual_rolling_shutter: "manual_rolling_shutter",
    chain_electric_shutter: "chain_electric_shutter",
    electric_rolling_shutter: "electric_rolling_shutter",
    ‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π: "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π",
    ‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß",
    ‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô: "‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô",
    ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°: "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
  };

  const [search, setSearch] = useState("");
  const [products, setProducts] = useState([]);
  const [visible, setVisible] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);

  // 4) newProduct ‡∏Ñ‡∏∑‡∏≠ State ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ ProductForm
  const [newProduct, setNewProduct] = useState({
    name: "",
    category: "",
    price: "",
    stock_quantity: "",
    colors: [],
    description: "",
    warranty: "",
    images: [],
    // ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå Product Type (is_part) ‡∏î‡πâ‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á
    is_part: undefined,
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å backend ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà component mount
  useEffect(() => {
    loadProducts();
  }, []);

  const loadProducts = async () => {
    try {
      const data = await ProductService.fetchProducts();
      setProducts(data);
    } catch (error) {
      alert(error.message);
    }
  };

  // ‡πÅ‡∏õ‡∏•‡∏á BOM array ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const formatBOM = (bomArray) => {
    if (!bomArray) return "";
    let lines = bomArray.map((item) => {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ quantityPerMeter ‡∏´‡∏£‡∏∑‡∏≠ quantity
      if (item.quantityPerMeter !== undefined) {
        return `- ${item.part} ${item.quantityPerMeter} ${item.unit}`;
      } else if (item.quantity !== undefined) {
        return `- ${item.part} ${item.quantity} ${item.unit}`;
      }
      return `- ${item.part}`;
    });
    return `\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n` + lines.join("\n");
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
  
    if (name === "category") {
      const configKey = categoryMap[value];
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô
      if (configKey && shutter_partsConfig?.data?.[configKey]) {
        const { description, warranty } = shutter_partsConfig.data[configKey];
  
        setNewProduct((prev) => ({
          ...prev,
          category: value,
          description: description,  // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å description ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          warranty: warranty,        // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å warranty ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        }));
        return;
      }
  
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ‡∏Å‡πá‡πÉ‡∏ä‡πâ doorConfig ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
      if (configKey && doorConfig?.data?.[configKey]) {
        const { description, warranty, bom } = doorConfig.data[configKey];
        let bomText = formatBOM(bom);
        let fullDesc = description + bomText;
  
        setNewProduct((prev) => ({
          ...prev,
          category: value,
          description: fullDesc,
          warranty: warranty,
        }));
        return;
      }
    }
  
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    setNewProduct((prev) => ({ ...prev, [name]: value }));
  };
  

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ upload ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ
  const onImageUpload = (event) => {
    const uploadedFiles = event.files.map((file) => ({
      file,
      previewUrl: URL.createObjectURL(file),
    }));

    setNewProduct((prev) => {
      const existingFileNames = new Set(prev.images.map((img) => img.file?.name));
      const uniqueFiles = uploadedFiles.filter(
        (img) => !existingFileNames.has(img.file.name)
      );
      return {
        ...prev,
        images: [...prev.images, ...uniqueFiles],
      };
    });
  };

  // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
  const handleRemoveImage = (imageToRemove, event) => {
    event.stopPropagation();
    setNewProduct((prev) => {
      const updatedImages = prev.images.filter((image) => {
        if (!image.file) {
          return image.previewUrl !== imageToRemove.previewUrl;
        }
        return image.file.name !== imageToRemove.file.name;
      });
      return { ...prev, images: updatedImages };
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å Product ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    if (!newProduct.name || !newProduct.category) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Price / Stock ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ is_part === true
    if (
      newProduct.is_part === true &&
      (!newProduct.price || !newProduct.stock_quantity)
    ) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Price ‡πÅ‡∏•‡∏∞ Stock Quantity ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô");
      return;
    }

    try {
      await ProductService.addProduct(newProduct);
      setVisible(false);
      loadProducts();
    } catch (error) {
      alert(error.message);
    }
  };

  // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Edit ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const handleEdit = (product) => {
    setEditingProduct(product);
    setNewProduct({
      name: product.name,
      category: product.category,
      price: product.price,
      stock_quantity: product.stock_quantity,
      colors: Array.isArray(product.colors) ? product.colors : [],
      description: product.description || "",
      warranty: product.warranty || "",
      images: product.images
        ? product.images.map((img) => ({
          previewUrl: `http://localhost:1234${img}`,
        }))
        : [],
      is_part: product.is_part, // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    });
    setEditMode(true);
    setVisible(true);
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleSaveEdit = async (event) => {
    event.preventDefault();
    if (!editingProduct) return;
    try {
      await ProductService.updateProduct(editingProduct.id, newProduct);
      setVisible(false);
      setEditMode(false);
      loadProducts();
    } catch (error) {
      alert(error.message);
    }
  };

  // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleDelete = async (productId) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ?")) return;
    try {
      await ProductService.deleteProduct(productId);
      setProducts(products.filter((product) => product.id !== productId));
    } catch (error) {
      alert(error.message);
    }
  };

  return (
    <div className="p-6 min-h-screen">
      <div className="flex justify-content-between items-center mb-4">
        <h1 className="text-2xl font-bold">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>
        <div className="flex space-x-4 items-center ml-auto">
          <div className="ml-auto w-72 pt-3">
            <span className="p-input-icon-left w-full flex items-center pr-3">
              <i className="pi pi-search pl-3 text-gray-500" />
              <InputText
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                className="w-full pl-8"
              />
            </span>
          </div>
          <div className="pt-3">
            <Button
              label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"
              icon="pi pi-plus"
              className="p-button-primary"
              onClick={() => {
                setEditMode(false);
                setEditingProduct(null);
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï newProduct ‡πÉ‡∏´‡∏°‡πà
                setNewProduct({
                  name: "",
                  category: "",
                  price: "",
                  stock_quantity: "",
                  colors: [],
                  description: "",
                  warranty: "",
                  images: [],
                  is_part: undefined,
                });
                setVisible(true);
              }}
            />
          </div>
        </div>
      </div>

      <ProductTable
        products={products}
        handleEdit={handleEdit}
        handleDelete={handleDelete}
        categoryOptions={{
          shutter: [
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏î‡∏∂‡∏á", value: "manual_rolling_shutter" },
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà", value: "chain_electric_shutter" },
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", value: "electric_rolling_shutter" },
          ],
          shutter_parts: [
            { label: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π", value: "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π" },
            { label: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß", value: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß" },
            { label: "‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", value: "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" },
          ],
        }}
      />

      {/* Dialog ‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç */}
      <ProductForm
        visible={visible}
        setVisible={setVisible}
        editMode={editMode}
        newProduct={newProduct}
        setNewProduct={setNewProduct}
        handleInputChange={handleInputChange}
        onImageUpload={onImageUpload}
        handleRemoveImage={handleRemoveImage}
        handleSubmit={handleSubmit}
        handleSaveEdit={handleSaveEdit}
        colorOptions={[
          { label: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ (Colorless)", value: "colorless" },
          { label: "‡∏î‡∏≥ (Black)", value: "black" },
          { label: "‡πÄ‡∏ó‡∏≤ (Gray)", value: "gray" },
          { label: "‡∏ä‡∏°‡∏û‡∏π (Pink)", value: "pink" },
          { label: "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô (Blue)", value: "blue" },
          { label: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Green)", value: "green" },
          { label: "‡πÅ‡∏î‡∏á (Red)", value: "red" },
          { label: "‡∏Ç‡∏≤‡∏ß (White)", value: "white" },
        ]}
        // ‡∏™‡πà‡∏ß‡∏ô Category Options ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô / ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
        categoryOptions={{
          shutter: [
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏î‡∏∂‡∏á", value: "manual_rolling_shutter" },
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà", value: "chain_electric_shutter" },
            { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", value: "electric_rolling_shutter" },
          ],
          shutter_parts: [
            { label: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÄ‡∏™‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π", value: "‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏°‡πâ‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π" },
            { label: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏£‡∏≠‡∏Å‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ü‡∏∑‡∏≠‡∏á‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡πÇ‡∏ã‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß", value: "‡∏ï‡∏±‡∏ß‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏ã‡πà‡∏™‡∏≤‡∏ß" },
            { label: "‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô", value: "‡∏ä‡∏∏‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô" },
            { label: "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", value: "‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏Å‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°" },
          ],
        }}
      />
    </div>
  );
};

export default ManageProducts;
