import React, { useEffect, useRef } from "react";
import AddressForm from "../User Pages/Profile component/AddressPage component/AddressForm";
import useAddressForm from "../User Pages/Profile component/AddressPage component/useAddressForm";
import { useLocation, useNavigate } from "react-router-dom";
import { Toast } from "primereact/toast";
import axios from "axios";

const AddAddress = () => {
    const {
        newAddress,
        setNewAddress,
        selectedProvince,
        selectedAmphure,
        selectedTambon,
        filteredAmphures,
        filteredTambons,
        handleProvinceChange,
        handleAmphureChange,
        handleTambonChange,
        errors,
        validateForm,
        provinces,
        resetForm,
    } = useAddressForm();

    const location = useLocation();
    const navigate = useNavigate();
    const userId = location.state?.userId; // üìå ‡∏£‡∏±‡∏ö userId ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Register
    const toastRef = useRef(null); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á toastRef

    useEffect(() => {
        if (!userId) {
            toastRef.current?.show({
                severity: "error",
                summary: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                detail: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                life: 3000,
            });
            navigate("/login");
        }
    }, [userId, navigate]);


    const saveAddress = async () => {
        if (!validateForm()) return;

        const token = localStorage.getItem("token");
        if (!token) {
            toastRef.current?.show({
                severity: "warn",
                summary: "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
                detail: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà",
                life: 3000,
            });
            navigate("/login");
            return;
        }

        try {
            const addressData = {
                address: {
                    userId,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° userId
                    addressLine: newAddress.addressLine,
                    province: newAddress.province,
                    district: newAddress.district,
                    subdistrict: newAddress.subdistrict,
                    postalCode: parseInt(newAddress.postalCode, 10),
                },
            };

            await axios.post(`${process.env.REACT_APP_API}/api/addresses`, addressData, {
                headers: { Authorization: `Bearer ${token}` },
            });

            toastRef.current?.show({
                severity: "success",
                summary: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                detail: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                life: 3000,
            });

            setTimeout(() => {
                navigate("/home");
            }, 1000); // ‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á‡πÉ‡∏´‡πâ toast ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤

        } catch (error) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ:", error.response?.data || error.message);
            toastRef.current?.show({
                severity: "error",
                summary: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                detail: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                life: 3000,
            });
        }
    };

    return (
        <div className="flex justify-content-center align-items-center" style={{ height: "100vh" }}>
            <Toast ref={toastRef} /> {/* ‚úÖ Toast Component */}
            <div className="surface-card p-6 shadow-2 border-round-lg" style={{ width: "100%", maxWidth: "600px" }}>
                <h2 className="text-center mb-4 text-blue-600">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h2>
                <AddressForm
                    newAddress={newAddress}
                    setNewAddress={setNewAddress}
                    selectedProvince={selectedProvince}
                    selectedAmphure={selectedAmphure}
                    selectedTambon={selectedTambon}
                    filteredAmphures={filteredAmphures}
                    filteredTambons={filteredTambons}
                    handleProvinceChange={handleProvinceChange}
                    handleAmphureChange={handleAmphureChange}
                    handleTambonChange={handleTambonChange}
                    errors={errors}
                    saveAddress={saveAddress}
                    provinces={provinces}
                />
            </div>
        </div>
    );
};

export default AddAddress;
