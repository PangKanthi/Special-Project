import React, { useState } from "react";
import { InputText } from "primereact/inputtext";
import { Dropdown } from "primereact/dropdown";
import { InputTextarea } from "primereact/inputtextarea";
import { Message } from "primereact/message";
import useLocationData from "../../Hooks/useLocationData"; // Hook ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î

const problemOptions = [
  { label: "‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏µ‡∏¢", value: "‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏µ‡∏¢" },
  { label: "‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢", value: "‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢" },
  { label: "‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢", value: "‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢" },
  { label: "‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏µ‡∏¢", value: "‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏µ‡∏¢" },
];

const RepairForm = ({
  form,
  setForm,
  addresses,
  selectedAddress,
  setSelectedAddress,
  handleAddressSelection,
  handleInputChange,
  serviceTypes,
  user,
  errors,
}) => {
  // ‚úÖ ‡πÉ‡∏ä‡πâ Hook locationData ‡∏î‡∏∂‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•
  const { provinces, amphures, tambons } = useLocationData();

  const [selectedProvince, setSelectedProvince] = useState(null);
  const [selectedAmphure, setSelectedAmphure] = useState(null);
  const [selectedTambon, setSelectedTambon] = useState(null);

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
  const handleSelectProblem = (e) => {
    setForm((prev) => ({
      ...prev,
      problemDescription: e.value,
    }));
  };

  // ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á amphures/tambons ‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredAmphures =
    amphures.data?.filter(
      (amphure) => amphure.province_id === selectedProvince?.id
    ) || [];

  const filteredTambons =
    tambons.data?.filter(
      (tambon) => tambon.amphure_id === selectedAmphure?.id
    ) || [];

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  const handleProvinceChange = (e) => {
    setSelectedProvince(e.value);
    setSelectedAmphure(null);
    setSelectedTambon(null);
    handleInputChange(e, "province");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
  const handleAmphureChange = (e) => {
    setSelectedAmphure(e.value);
    setSelectedTambon(null);
    handleInputChange(e, "district");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡∏ö‡∏•
  const handleTambonChange = (e) => {
    setSelectedTambon(e.value);

    if (!e.value || !e.value.name_th) {
      return;
    }

    handleInputChange(
      { target: { id: "subdistrict", value: e.value.name_th } },
      "subdistrict"
    );
    handleInputChange(
      { target: { id: "postcode", value: e.value.zip_code } },
      "postcode"
    );
  };

  return (
    <div className="p-fluid p-formgrid p-grid pt-5" style={{ justifyContent: "center" }}>
      {/* üî∏ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏° */}
      <div className="p-field p-col-12 pt-3">
        <label htmlFor="serviceType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°</label>
        <Dropdown
          id="serviceType"
          value={form.serviceType}
          options={serviceTypes}
          onChange={(e) => handleInputChange(e, "serviceType")}
          placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
        />
        {errors.serviceType && <Message severity="error" text={errors.serviceType} />}
      </div>

      {/* üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ */}
      <div className="p-field p-col-12 pt-3">
        <label htmlFor="problemDescription">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</label>
        <Dropdown
          value={form.problemDescription || null}
          options={problemOptions}
          onChange={handleSelectProblem}
          placeholder="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"
          className="p-mb-2"
        />

        <InputTextarea
          id="problemDescription"
          value={form.problemDescription}
          onChange={(e) => handleInputChange(e, "problemDescription")}
          rows={3}
          placeholder="‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        />

        {errors.problemDescription && (
          <Message severity="error" text={errors.problemDescription} />
        )}
      </div>

      {/* üîπ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
      <div className="p-fluid p-grid">
        <div className="p-field p-col-12 pt-3">
          <label htmlFor="address">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</label>
          <Dropdown
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            value={selectedAddress ? selectedAddress.id : null}
            options={addresses}
            onChange={(e) => {
              const selected = addresses.find((addr) => addr.id === e.value);
              // ‚¨áÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleAddressSelection (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form + selectedAddress)
              handleAddressSelection(selected || null);
            }}
            optionLabel={(address) =>
              `${address.addressLine}, ‡∏ï‡∏≥‡∏ö‡∏•${address.subdistrict}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${address.district}, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${address.province}, ${address.postalCode}`
            }
            optionValue="id"
            className="w-full"
          />
        </div>

        {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß */}
        {selectedAddress && (
          <div className="p-field p-col-12 border p-3 rounded bg-gray-100">
            <p>
              <strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {selectedAddress.addressLine}, ‡∏ï‡∏≥‡∏ö‡∏•
              {selectedAddress.subdistrict}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠{selectedAddress.district},
              ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î{selectedAddress.province}, {selectedAddress.postalCode}
            </p>
            <p>
              <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> {user?.firstname} {user?.lastname}
            </p>
            <p>
              <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {user?.phone}
            </p>
          </div>
        )}

        {/* üîπ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà -> ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á */}
        {!selectedAddress && (
          <>
            <div className="p-field p-col-12 pt-3">
              <label htmlFor="addressLine">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
              <InputTextarea
                id="addressLine"
                value={form.addressLine}
                onChange={(e) => handleInputChange(e, "addressLine")}
                rows={2}
                placeholder="*‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ñ‡∏ô‡∏ô ‡∏ã‡∏≠‡∏¢"
              />
              {errors.addressLine && (
                <Message severity="error" text={errors.addressLine} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡πÄ‡∏°‡∏∑‡∏≠‡∏á</label>
              <Dropdown
                id="province"
                value={selectedProvince}
                options={provinces.data}
                onChange={handleProvinceChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                optionLabel="name_th"
                className="w-full"
                disabled={provinces.isLoading}
              />
              {errors.province && (
                <Message severity="error" text={errors.province} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="district">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</label>
              <Dropdown
                id="district"
                value={selectedAmphure}
                options={filteredAmphures}
                onChange={handleAmphureChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                optionLabel="name_th"
                className="w-full"
                disabled={!selectedProvince || amphures.isLoading}
              />
              {errors.district && (
                <Message severity="error" text={errors.district} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="subdistrict">‡∏ï‡∏≥‡∏ö‡∏•</label>
              <Dropdown
                id="subdistrict"
                value={selectedTambon}
                options={filteredTambons}
                onChange={handleTambonChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•"
                optionLabel="name_th"
                className="w-full"
                disabled={!selectedAmphure || tambons.isLoading}
              />
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="postcode">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
              <InputText
                id="postcode"
                value={form.postcode}
                readOnly
                placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
              />
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default RepairForm;
