import React, { useState, useEffect } from "react";
import { InputText } from "primereact/inputtext";
import { Dropdown } from "primereact/dropdown";
import { InputTextarea } from "primereact/inputtextarea";
import { Message } from "primereact/message";
import useLocationData from "../../Hooks/useLocationData";
import moment from "moment-timezone";

const problemOptions = [
  { label: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á", value: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á" },
  { label: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á", value: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á" },
  { label: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢", value: "‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡∏≥‡∏£‡∏∏‡∏î" },
  { label: "‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡∏ö‡∏¥‡∏î‡∏á‡∏≠", value: "‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡∏≥‡∏£‡∏∏‡∏î" },
  { label: "‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á", value: "‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á" },
];

const RepairForm = ({
  form,
  setForm,
  addresses,
  selectedAddress,
  setSelectedAddress,
  handleAddressSelection,
  handleInputChange,
  serviceTypes,
  user,
  errors,
  completedProducts,
  selectedProduct,
  setSelectedProduct,
}) => {
  // ‚úÖ ‡πÉ‡∏ä‡πâ Hook locationData ‡∏î‡∏∂‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•
  const { provinces, amphures, tambons } = useLocationData();

  const [selectedProvince, setSelectedProvince] = useState(null);
  const [selectedAmphure, setSelectedAmphure] = useState(null);
  const [selectedTambon, setSelectedTambon] = useState(null);
  const [defaultPrice, setDefaultPrice] = useState(null);

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
  const handleSelectProblem = (e) => {
    setForm((prev) => ({
      ...prev,
      problemDescription: e.value,
    }));
  };

  // ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á amphures/tambons ‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const filteredAmphures =
    amphures.data?.filter(
      (amphure) => amphure.province_id === selectedProvince?.id
    ) || [];

  const filteredTambons =
    tambons.data?.filter(
      (tambon) => tambon.amphure_id === selectedAmphure?.id
    ) || [];

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  const handleProvinceChange = (e) => {
    setSelectedProvince(e.value);
    setSelectedAmphure(null);
    setSelectedTambon(null);
    handleInputChange(e, "province");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
  const handleAmphureChange = (e) => {
    setSelectedAmphure(e.value);
    setSelectedTambon(null);
    handleInputChange(e, "district");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡∏ö‡∏•
  const handleTambonChange = (e) => {
    setSelectedTambon(e.value);

    if (!e.value || !e.value.name_th) {
      return;
    }

    handleInputChange(
      { target: { id: "subdistrict", value: e.value.name_th } },
      "subdistrict"
    );
    handleInputChange(
      { target: { id: "postcode", value: e.value.zip_code } },
      "postcode"
    );
  };

  useEffect(() => {
    const fetchDefaultPrice = async () => {
      try {
        const res = await fetch(
          `${process.env.REACT_APP_API}/api/repair-requests/default-repair-price`
        );
        const data = await res.json();
        if (res.ok) {
          setDefaultPrice(data.price);
          setForm((prevForm) => ({
            ...prevForm,
            repair_price: data.price, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á‡πÉ‡∏ô form
          }));
        }
      } catch (err) {
        console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }
    };

    fetchDefaultPrice();
  }, []);

  return (
    <div
      className="p-fluid p-formgrid p-grid"
      style={{ justifyContent: "center" }}
    >
      {/* üî∏ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏° */}
      <div className="p-field p-col-12">
        <h3 className="text-right">
          ‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {defaultPrice?.toLocaleString("th-TH") || "..."} ‡∏ö‡∏≤‡∏ó
        </h3>
        {completedProducts.length > 0 && (
          <div className="p-field p-col-12 pt-2">
            <label htmlFor="product">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</label>
            <Dropdown
              id="product"
              value={selectedProduct}
              options={completedProducts}
              onChange={(e) => setSelectedProduct(e.value)}
              optionLabel="name"
              placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
              itemTemplate={(option) => (
                <div className="flex align-items-center">
                  {option.image && (
                    <img
                      src={`${process.env.REACT_APP_API}${option.image}`}
                      alt={option.name}
                      style={{ width: 40, marginRight: 10 }}
                      onError={(e) =>
                        (e.target.src = "https://via.placeholder.com/40")
                      }
                    />
                  )}
                  <span>{option.name}</span>
                </div>
              )}
            />
            {selectedProduct && (
              <div className="p-field p-col-12 border p-3 rounded bg-gray-100 mt-2">
                <p>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> {selectedProduct.name}
                </p>
                {Array.isArray(form.product_image) &&
                  form.product_image.map((img, index) => (
                    <img
                      key={index}
                      src={`${process.env.REACT_APP_API}${img}`}
                      alt={`‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${index + 1}`}
                      style={{
                        width: "120px",
                        height: "100px",
                        objectFit: "cover",
                        marginRight: "10px",
                        borderRadius: "10px",
                      }}
                    />
                  ))}
                <p>
                  <strong>‡∏™‡∏µ:</strong> {selectedProduct.color}
                </p>
                <p>
                  <strong>‡∏Ç‡∏ô‡∏≤‡∏î:</strong> {selectedProduct.width} x{" "}
                  {selectedProduct.length} ‡πÄ‡∏°‡∏ï‡∏£
                </p>
                <p>
                  <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤:</strong> {selectedProduct.thickness}
                </p>
                <p>
                  <strong>‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:</strong>{" "}
                  {selectedProduct.installOption}
                </p>
                <p>
                  <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</strong> {selectedProduct.quantity}
                </p>
                <p>
                  <strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô:</strong>{" "}
                  {selectedProduct.price?.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                </p>
                {selectedProduct.completedAt &&
                  selectedProduct.warranty &&
                  (() => {
                    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ completedAt ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ã‡∏ô Asia/Bangkok
                    const completedAtBangkok = moment
                      .utc(selectedProduct.completedAt)
                      .tz("Asia/Bangkok");
                    // ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                    const expiryDate = completedAtBangkok
                      .clone()
                      .add(selectedProduct.warranty, "year");
                    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô Asia/Bangkok
                    const isUnderWarranty = moment()
                      .tz("Asia/Bangkok")
                      .isBefore(expiryDate);
                    return (
                      <p>
                        <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:</strong>{" "}
                        {isUnderWarranty ? "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô" : "‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"}
                      </p>
                    );
                  })()}

              </div>
            )}
          </div>
        )}
        <div className="pt-2">
          <label htmlFor="serviceType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°</label>
          <Dropdown
            id="serviceType"
            value={form.serviceType}
            options={serviceTypes}
            onChange={(e) => setForm({ ...form, serviceType: e.value })}
            placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
          />
          {errors.serviceType && (
            <Message severity="error" text={errors.serviceType} />
          )}
        </div>
      </div>

      {/* üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ */}
      <div className="p-field p-col-12 pt-3">
        <label htmlFor="problemDescription">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</label>
        <Dropdown
          value={form.problemDescription || null}
          options={problemOptions}
          onChange={handleSelectProblem}
          placeholder="‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"
          className="p-mb-2"
        />

        <InputTextarea
          id="problemDescription"
          value={form.problemDescription}
          onChange={(e) => handleInputChange(e, "problemDescription")}
          rows={3}
          placeholder="‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        />

        {errors.problemDescription && (
          <Message severity="error" text={errors.problemDescription} />
        )}
      </div>

      {/* üîπ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
      <div className="p-fluid p-grid">
        <div className="p-field p-col-12 pt-3">
          <label htmlFor="address">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</label>
          <Dropdown
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            value={selectedAddress ? selectedAddress.id : null}
            options={addresses}
            onChange={(e) => {
              const selected = addresses.find((addr) => addr.id === e.value);
              // ‚¨áÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleAddressSelection (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form + selectedAddress)
              handleAddressSelection(selected || null);
            }}
            optionLabel={(address) =>
              `${address.addressLine}, ‡∏ï‡∏≥‡∏ö‡∏•${address.subdistrict}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠${address.district}, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î${address.province}, ${address.postalCode}`
            }
            optionValue="id"
            className="w-full"
          />
        </div>

        {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß */}
        {selectedAddress && (
          <div className="p-field p-col-12 border p-3 rounded bg-gray-100">
            <p>
              <strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> {selectedAddress.addressLine}, ‡∏ï‡∏≥‡∏ö‡∏•
              {selectedAddress.subdistrict}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠{selectedAddress.district},
              ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î{selectedAddress.province}, {selectedAddress.postalCode}
            </p>
            <p>
              <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> {user?.firstname} {user?.lastname}
            </p>
            <p>
              <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {user?.phone}
            </p>
          </div>
        )}

        {/* üîπ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà -> ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á */}
        {!selectedAddress && (
          <>
            <div className="p-field p-col-12 pt-3">
              <label htmlFor="addressLine">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
              <InputTextarea
                id="addressLine"
                value={form.addressLine}
                onChange={(e) => handleInputChange(e, "addressLine")}
                rows={2}
                placeholder="*‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ñ‡∏ô‡∏ô ‡∏ã‡∏≠‡∏¢"
              />
              {errors.addressLine && (
                <Message severity="error" text={errors.addressLine} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡πÄ‡∏°‡∏∑‡∏≠‡∏á</label>
              <Dropdown
                id="province"
                value={selectedProvince}
                options={provinces.data}
                onChange={handleProvinceChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                optionLabel="name_th"
                className="w-full"
                disabled={provinces.isLoading}
              />
              {errors.province && (
                <Message severity="error" text={errors.province} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="district">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</label>
              <Dropdown
                id="district"
                value={selectedAmphure}
                options={filteredAmphures}
                onChange={handleAmphureChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                optionLabel="name_th"
                className="w-full"
                disabled={!selectedProvince || amphures.isLoading}
              />
              {errors.district && (
                <Message severity="error" text={errors.district} />
              )}
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="subdistrict">‡∏ï‡∏≥‡∏ö‡∏•</label>
              <Dropdown
                id="subdistrict"
                value={selectedTambon}
                options={filteredTambons}
                onChange={handleTambonChange}
                placeholder="*‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•"
                optionLabel="name_th"
                className="w-full"
                disabled={!selectedAmphure || tambons.isLoading}
              />
            </div>

            <div className="p-field p-col-6 pt-3">
              <label htmlFor="postcode">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
              <InputText
                id="postcode"
                value={form.postcode}
                readOnly
                placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
              />
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default RepairForm;
