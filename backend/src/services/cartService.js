import prisma from '../config/db.js';

class CartService {
    static async getCart(userId) {
        return await prisma.cart.findUnique({
            where: { userId },
            include: {
                items: {
                    include: { product: true },
                },
            },
        });
    }

    /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
   * @param {number} userId
   * @param {number|null} productId - ‡∏ñ‡πâ‡∏≤ null => ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö virtual
   * @param {number} quantity
   * @param {number|null} price - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ Backend ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á null ‡∏°‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ
   * @param {string} color
   * @param {number} width
   * @param {number} length
   * @param {string} thickness
   * @param {string} installOption
   * @param {string} doorType - "MANUAL" | "CHAIN" | "ELECTRIC"
   */
    static async addToCart(
        userId,
        productId,
        quantity,
        price,
        color,
        width,
        length,
        thickness,
        installOption,
        doorType
    ) {
        // 1) ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á cart ‡πÉ‡∏´‡πâ user ‡∏Å‡πà‡∏≠‡∏ô
        let cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) {
            cart = await prisma.cart.create({ data: { userId } });
        }
        console.log("üõí Cart ID:", cart.id);

        // 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ productId => ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á product
        //    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ (null/undefined/0) => ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô virtual => ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏≠‡∏á‡∏à‡∏≤‡∏Å JSON
        let finalPrice = price || 0; // ‡∏ñ‡πâ‡∏≤ Frontend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

        if (!productId) {
            // ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô
            if (!doorType) {
                throw new Error("doorType is required if productId is null");
            }
            finalPrice = await this.calculateDoorPrice(doorType, thickness, width, length);
        } else {
            // ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á => ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const product = await prisma.product.findUnique({ where: { id: productId } });
            if (!product) {
                throw new Error("‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
            }
        }

        // 3) upsert ‡∏•‡∏á cart_item
        const updatedCartItem = await prisma.cart_item.upsert({
            where: {
                cartId_productId_doorType_width_length_thickness_color_install: {
                    cartId: cart.id,
                    productId: productId || null,
                    doorType: doorType || null,
                    width: width || null,
                    length: length || null,
                    thickness: thickness || null,
                    color: color || "default",
                    install: installOption || null,
                },
            },
            update: {
                quantity: { increment: quantity },
            },
            create: {
                cartId: cart.id,
                productId: productId || null,
                quantity,
                price: finalPrice,
                color: color || "default",
                width: width || null,
                length: length || null,
                thickness: thickness || null,
                install: installOption || null,
                doorType: doorType || null,
            },
        });

        return updatedCartItem;
    }


    /**
     * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ ‚Äú‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‚Äù ‡∏à‡∏≤‡∏Å JSON
     */
    static async calculateDoorPrice(doorType, thickness, width, length) {
        const doorData = doorConfig[doorType];
        if (!doorData) {
            throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡πâ‡∏ß‡∏ô‡∏ä‡∏ô‡∏¥‡∏î ${doorType} ‡πÉ‡∏ô JSON`);
        }

        const area = width * length;

        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ MANUAL/CHAIN ‡πÄ‡∏Å‡πá‡∏ö priceTiers ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
        // ELECTRIC ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ priceRanges ‡∏ã‡πâ‡∏≠‡∏ô
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô logic ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á

        // 1) ‡∏´‡∏≤ tier ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö thickness
        const tier = doorData.priceTiers?.find((t) => t.thickness.includes(thickness));
        if (!tier) {
            // ‡∏Å‡∏£‡∏ì‡∏µ ELECTRIC ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ thickness ‡∏ï‡∏£‡∏á ‡πÜ ‡πÅ‡∏ï‡πà‡∏°‡∏µ sub-array priceRanges
            // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡πÅ‡∏¢‡∏Å
            throw new Error(`‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤ ${thickness} ‡πÉ‡∏ô ${doorType}`);
        }

        // 2) ‡πÄ‡∏ä‡πá‡∏Ñ minArea / maxArea ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (typeof tier.minArea === "number" && area < tier.minArea) {
            throw new Error(`‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (min: ${tier.minArea})`);
        }
        if (typeof tier.maxArea === "number" && area > tier.maxArea) {
            throw new Error(`‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (max: ${tier.maxArea})`);
        }

        // 3) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ pricePerSqm ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        const finalPrice = area * tier.pricePerSqm;
        return finalPrice;
    }

    static async removeFromCart(userId, productId) {
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        return await prisma.cart_item.deleteMany({
            where: { cartId: cart.id, productId },
        });
    }

    static async clearCart(userId) {
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        return await prisma.cart_item.deleteMany({
            where: { cartId: cart.id },
        });
    }
}

export default CartService;
