// services/cartService.js

import prisma from '../config/db.js';

class CartService {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á user ‡∏û‡∏£‡πâ‡∏≠‡∏° items
    static async getCart(userId) {
        return await prisma.cart.findUnique({
            where: { userId },
            include: {
                items: {
                    include: { product: true } // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• product ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
                }
            }
        });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    static async addToCart(
        userId,
        productId,
        quantity,
        price,
        color,
        width,
        length,
        thickness,
        installOption
    ) {
        console.log(`üõí Adding to cart - User ID: ${userId}, Product ID: ${productId}, Quantity: ${quantity}, Color: ${color}`);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ cart ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        let cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) {
            cart = await prisma.cart.create({ data: { userId } });
        }
        console.log("üì¶ Cart ID:", cart.id);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ product ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const product = await prisma.product.findUnique({ where: { id: productId } });
        if (!product) {
            throw new Error("‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
        }

        // upsert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
        const updatedCartItem = await prisma.cart_item.upsert({
            where: {
                cartId_productId_color_width_length_thickness_installOption: {
                    cartId: cart.id,
                    productId,
                    color: color || "default",
                    width,
                    length,
                    thickness,
                    installOption
                }
            },
            update: { quantity: { increment: quantity } },
            create: {
                cartId: cart.id,
                productId,
                quantity,
                price,
                color: color || "default",
                width,
                length,
                thickness,
                installOption
            }
        });

        return updatedCartItem;
    }

    // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ productId)
    // (‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ö‡∏ö productId ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    static async removeFromCart(userId, productId) {
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        return await prisma.cart_item.deleteMany({
            where: { cartId: cart.id, productId }
        });
    }

    // (‡πÉ‡∏´‡∏°‡πà) ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á cart_item.id
    static async removeFromCartByItemId(userId, cartItemId) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ cart ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cart_item ‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cart ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
        const cartItem = await prisma.cart_item.findUnique({ where: { id: cartItemId } });
        if (!cartItem || cartItem.cartId !== cart.id) {
            throw new Error("Item not found in user's cart");
        }

        // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        return await prisma.cart_item.delete({
            where: { id: cartItemId }
        });
    }

    // (‡πÉ‡∏´‡∏°‡πà) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏ï‡∏≤‡∏° cart_item.id)
    static async updateCartItemQuantity(userId, cartItemId, newQuantity) {
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        const cartItem = await prisma.cart_item.findUnique({ where: { id: cartItemId } });
        if (!cartItem || cartItem.cartId !== cart.id) {
            throw new Error("Cart item not found or does not belong to this user");
        }

        const updatedItem = await prisma.cart_item.update({
            where: { id: cartItemId },
            data: { quantity: newQuantity }
        });

        return updatedItem;
    }

    // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    static async clearCart(userId) {
        const cart = await prisma.cart.findUnique({ where: { userId } });
        if (!cart) throw new Error("Cart not found");

        console.log("üóë ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ID:", cart.id);
        const deletedItems = await prisma.cart_item.deleteMany({
            where: { cartId: cart.id }
        });
        console.log("‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", deletedItems.count);
        return deletedItems;
    }
}

export default CartService;
