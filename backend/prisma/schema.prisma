generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(100)
  description    String?      @db.Text
  price          Decimal      @db.Decimal(10, 2)
  category       String       @db.VarChar(50)
  warranty       String?      @db.VarChar(50)
  is_part        Boolean?     @default(false)
  stock_quantity Int?         @default(0)
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @updatedAt
  colors         String[]
  images         String[]
  order_items    order_item[]
  reviews        review[]
}

model user {
  id        Int     @id @default(autoincrement())
  username  String  @unique @db.VarChar(20)
  firstname String  @db.VarChar(50)
  lastname  String  @db.VarChar(50)
  password  String  @db.VarChar(100)
  email     String  @unique @db.VarChar(50)
  phone     String? @db.VarChar(10)
  role      String  @default("U") @db.Char(1)

  addresses      Address[]
  orders         order[]
  reviews        review[]
  repair_request repair_request[]
}

model Address {
  id          Int     @id @default(autoincrement())
  addressLine String  @db.Text
  province    String  @db.VarChar(100)
  district    String  @db.VarChar(100)
  subdistrict String  @db.VarChar(100)
  postalCode  Int
  userId      Int
  isPrimary   Boolean @default(false)
  isShipping  Boolean @default(true)

  user           user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         order[]
  repair_request repair_request[]

  @@map("addresses")
}

model order {
  id             Int      @id @default(autoincrement())
  order_date     DateTime @default(now()) @db.Timestamp(6)
  status         String   @db.VarChar(20)
  total_amount   Decimal  @db.Decimal(10, 2)
  userId         Int
  addressId      Int
  type           String   @db.VarChar(50)
  payment_status String   @db.VarChar(20)
  payment_slip   String?

  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  order_items    order_item[]

  @@map("orders")
}

model order_item {
  id                Int     @id @default(autoincrement())
  orderId           Int
  productId         Int
  installationKitId Int?
  quantity          Int
  price             Decimal @db.Decimal(10, 2)

  order   order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model review {
  id        Int    @id @default(autoincrement())
  content   String @db.Text
  rating    Int    @default(0)
  userId    Int
  productId Int

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model work_sample {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  images      String[]

  @@map("work_samples")
}

model repair_request {
  id                  Int      @id @default(autoincrement())
  problem_description String   @db.Text
  service_type        String   @db.VarChar(50)
  request_date        DateTime @default(now()) @db.Timestamp(6)
  userId              Int
  addressId           Int
  images              String[]

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}
