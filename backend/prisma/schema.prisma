generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------------------------------------
// ENUMS
// ----------------------------------------------------------------------------------
enum RepairStatus {
  pending
  confirm
  complete
  cancle
}

enum DoorType {
  MANUAL
  CHAIN
  ELECTRIC
}

// ----------------------------------------------------------------------------------
// MODELS
// ----------------------------------------------------------------------------------
model product {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(100)
  description    String?
  price          Decimal @db.Decimal(10, 2)      // ราคาต่อชิ้น (อะไหล่)
  category       String  @db.VarChar(50)         // เช่น "shaft", "sheet", "rails"
  stock_quantity Int     @default(0)             // สต็อกคงเหลือ

  created_at DateTime? @default(now())
  updated_at DateTime  @updatedAt

  // ความสัมพันธ์กับ order/cart
  order_items order_item[]
  cart_item   cart_item[]

  // ความสัมพันธ์กับ door_parts (BOM)
  door_parts_doorProduct door_parts[] @relation("DoorProduct")
  door_parts_partProduct door_parts[] @relation("PartProduct")

  // ความสัมพันธ์กับรีวิว
  review review[]
}

model door_parts {
  id       Int @id @default(autoincrement())
  doorId   Int
  partId   Int
  quantity Int

  // ตั้งชื่อ Relation ให้ต่างกัน เพื่อไม่ให้ชนกัน
  doorProduct product @relation("DoorProduct", fields: [doorId], references: [id])
  partProduct product @relation("PartProduct", fields: [partId], references: [id])

  @@map("door_parts")
}

model user {
  id                   Int       @id @default(autoincrement())
  username             String    @unique @db.VarChar(20)
  firstname            String    @db.VarChar(50)
  lastname             String    @db.VarChar(50)
  password             String    @db.VarChar(100)
  email                String    @unique @db.VarChar(50)
  phone                String?   @db.VarChar(10)
  role                 String    @default("U") @db.Char(1)
  resetPasswordToken   String?   @db.VarChar(255)
  resetPasswordExpires DateTime?

  addresses      Address[]
  orders         order[]
  reviews        review[]
  repair_request repair_request[]
  cart           cart?
}

model Address {
  id          Int     @id @default(autoincrement())
  addressLine String  @db.Text
  province    String  @db.VarChar(100)
  district    String  @db.VarChar(100)
  subdistrict String  @db.VarChar(100)
  postalCode  Int
  userId      Int
  isPrimary   Boolean @default(false)
  isShipping  Boolean @default(false)

  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         order[]
  repair_request repair_request[]

  @@map("addresses")
}

model order {
  id             Int      @id @default(autoincrement())
  order_date     DateTime @default(now())
  status         String   @default("pending")
  total_amount   Decimal  @db.Decimal(10, 2)
  userId         Int
  payment_status String   @default("unpaid")

  // ความสัมพันธ์
  user         user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  order_items  order_item[]
  Address      Address?       @relation(fields: [addressId], references: [id])
  addressId    Int?
  payment_slip payment_slip[]
}

model order_item {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int?    // null ถ้าเป็นประตู (virtual)

  quantity  Int
  price     Decimal @db.Decimal(10, 2) // ราคาต่อหน่วย (กรณีประตูหรืออะไหล่)

  // ข้อมูล “ประตู” (ถ้า productId == null)
  doorType  DoorType?
  width     Decimal?  @db.Decimal(10, 2)
  length    Decimal?  @db.Decimal(10, 2)
  color     String?
  thickness String? // หรือใช้ enum ก็ได้
  install   Boolean? // ติดตั้งหรือไม่

  order   order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product product? @relation(fields: [productId], references: [id])
}

model payment_slip {
  id         Int      @id @default(autoincrement())
  orderId    Int
  imageUrl   String
  uploadedAt DateTime @default(now())
  verified   Boolean  @default(false)

  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_slips")
}

model review {
  id        Int    @id @default(autoincrement())
  content   String @db.Text
  rating    Int    @default(0)
  userId    Int
  productId Int

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model work_sample {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  images      String[]

  @@map("work_samples")
}

model repair_request {
  id                  Int          @id @default(autoincrement())
  problem_description String       @db.Text
  service_type        String       @db.VarChar(50)
  request_date        DateTime     @default(now())
  userId              Int
  addressId           Int
  status              RepairStatus @default(pending)
  images              String[]

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

// ----------------------------------------------------------------------------------
// CART & CART_ITEM
// ----------------------------------------------------------------------------------
model cart {
  id     Int         @id @default(autoincrement())
  userId Int         @unique
  user   user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  cart_item[]
}

model cart_item {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int?    // null ถ้าเป็นประตู (virtual)
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // ข้อมูลประตู
  doorType  DoorType?
  width     Decimal? @db.Decimal(10, 2)
  length    Decimal? @db.Decimal(10, 2)
  color     String?
  thickness String?
  install   Boolean?

  cart    cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product product? @relation(fields: [productId], references: [id])

  // กันซ้ำภายในตะกร้า (Option)
  @@unique([cartId, productId, doorType, width, length, thickness, color, install])
}
