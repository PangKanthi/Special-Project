generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RepairStatus {
  pending
  confirm
  complete
  cancle
}

model product {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(100)
  description    String?      @db.Text
  price          Decimal?     @db.Decimal(10, 2)
  category       String       @db.VarChar(50)
  warranty       String?      @db.VarChar(50)
  is_part        Boolean?     @default(false)
  stock_quantity Int?
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @updatedAt
  colors         String[]
  images         String[]
  order_items    order_item[]
  reviews        review[]
  cart_item      cart_item[]
  status         Boolean      @default(false)

  bom_items   bom_item[]    @relation("ProductToParts")
  used_in     bom_item[]    @relation("PartsToProduct")
  repair_part repair_part[]
}

model user {
  id                   Int       @id @default(autoincrement())
  username             String    @unique @db.VarChar(20)
  firstname            String    @db.VarChar(50)
  lastname             String    @db.VarChar(50)
  password             String    @db.VarChar(100)
  email                String    @unique @db.VarChar(50)
  phone                String?   @db.VarChar(10)
  role                 String    @default("U") @db.Char(1)
  resetPasswordToken   String?   @db.VarChar(255)
  resetPasswordExpires DateTime?

  addresses      Address[]
  orders         order[]
  reviews        review[]
  repair_request repair_request[]
  cart           cart?
  notification   notification[]
}

model Address {
  id          Int     @id @default(autoincrement())
  addressLine String  @db.Text
  province    String  @db.VarChar(100)
  district    String  @db.VarChar(100)
  subdistrict String  @db.VarChar(100)
  postalCode  Int
  userId      Int
  isPrimary   Boolean @default(false)
  isShipping  Boolean @default(false)

  user           user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders         order[]
  repair_request repair_request[]

  @@map("addresses")
}

model order {
  id             Int      @id @default(autoincrement())
  order_date     DateTime @default(now()) @db.Timestamp(6)
  status         String   @db.VarChar(20)
  total_amount   Decimal  @db.Decimal(10, 2)
  userId         Int
  addressId      Int
  payment_status String   @db.VarChar(20)

  user          user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  order_items   order_item[]
  payment_slips payment_slip[]

  @@map("orders")
}

model order_item {
  id            Int      @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  color         String?  @db.VarChar(50)
  width         Decimal? @db.Decimal(10, 2)
  length        Decimal? @db.Decimal(10, 2)
  thickness     String?  @db.Text
  installOption String?  @db.VarChar(20)

  order   order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model payment_slip {
  id         Int      @id @default(autoincrement())
  orderId    Int
  imageUrl   String
  uploadedAt DateTime @default(now())
  verified   Boolean  @default(false)

  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_slips")
}

model review {
  id        Int    @id @default(autoincrement())
  content   String @db.Text
  rating    Int    @default(0)
  userId    Int
  productId Int

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model work_sample {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  images      String[]

  @@map("work_samples")
}

model repair_request {
  id                  Int          @id @default(autoincrement())
  problem_description String       @db.Text
  service_type        String       @db.VarChar(50)
  request_date        DateTime     @default(now()) @db.Timestamp(6)
  userId              Int
  addressId           Int
  status              RepairStatus @default(pending)
  images              String[]

  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  repair_part repair_part[]
}

model repair_part {
  id              Int @id @default(autoincrement())
  repairRequestId Int
  productId       Int
  quantity_used   Int

  repair_request repair_request @relation(fields: [repairRequestId], references: [id], onDelete: Cascade)
  product        product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([repairRequestId, productId])
}

model cart {
  id     Int         @id @default(autoincrement())
  userId Int         @unique
  user   user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  cart_item[]
}

model cart_item {
  id            Int      @id @default(autoincrement())
  cartId        Int
  productId     Int
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  color         String?  @db.VarChar(50)
  width         Decimal? @db.Decimal(10, 2)
  length        Decimal? @db.Decimal(10, 2)
  thickness     String?  @db.Text
  installOption String?  @db.VarChar(20)

  cart    cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, color, width, length, thickness, installOption])
}

model bom_item {
  id        Int    @id @default(autoincrement())
  productId Int
  partId    Int
  quantity  Int
  unit      String @db.VarChar(50)

  product product @relation("ProductToParts", fields: [productId], references: [id], onDelete: Cascade)
  part    product @relation("PartsToProduct", fields: [partId], references: [id], onDelete: Cascade)

  @@unique([productId, partId])
  @@map("bom_items")
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model door_price {
  id         Int      @id @default(autoincrement())
  door_type  String   @db.VarChar(100)   // ประเภทประตู เช่น "ประตูม้วนแบบมือดึง"
  thickness  String   @db.VarChar(50)    // ความหนา เช่น "0.4 mm (เบอร์ 23)"
  price      Decimal  @db.Decimal(10, 2) // ราคา/ตร.ม.
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
